// Package models contains the types for schema 'test'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/lib/pq"
)

// Comment represents a row from 'test.comments'.
type Comment struct {
	ID              int           `json:"id"`                // id
	Content         string        `json:"content"`           // content
	ParentCommentID sql.NullInt64 `json:"parent_comment_id"` // parent_comment_id
	PostID          int           `json:"post_id"`           // post_id
	IPAddress       string        `json:"ip_address"`        // ip_address
	CreatedAt       time.Time     `json:"created_at"`        // created_at
	UpdatedAt       time.Time     `json:"updated_at"`        // updated_at
	DeletedAt       pq.NullTime   `json:"deleted_at"`        // deleted_at
	CreateUserID    int           `json:"create_user_id"`    // create_user_id
	UpdateUserID    int           `json:"update_user_id"`    // update_user_id
	DeleteUserID    sql.NullInt64 `json:"delete_user_id"`    // delete_user_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Comment exists in the database.
func (c *Comment) Exists() bool {
	return c._exists
}

// Deleted provides information if the Comment has been deleted from the database.
func (c *Comment) Deleted() bool {
	return c._deleted
}

// Insert inserts the Comment to the database.
func (c *Comment) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO test.comments (` +
		`content, parent_comment_id, post_id, ip_address, created_at, updated_at, deleted_at, create_user_id, update_user_id, delete_user_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, c.Content, c.ParentCommentID, c.PostID, c.IPAddress, c.CreatedAt, c.UpdatedAt, c.DeletedAt, c.CreateUserID, c.UpdateUserID, c.DeleteUserID)
	err = db.QueryRow(sqlstr, c.Content, c.ParentCommentID, c.PostID, c.IPAddress, c.CreatedAt, c.UpdatedAt, c.DeletedAt, c.CreateUserID, c.UpdateUserID, c.DeleteUserID).Scan(&c.ID)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Comment in the database.
func (c *Comment) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE test.comments SET (` +
		`content, parent_comment_id, post_id, ip_address, created_at, updated_at, deleted_at, create_user_id, update_user_id, delete_user_id` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) WHERE id = $11`

	// run query
	XOLog(sqlstr, c.Content, c.ParentCommentID, c.PostID, c.IPAddress, c.CreatedAt, c.UpdatedAt, c.DeletedAt, c.CreateUserID, c.UpdateUserID, c.DeleteUserID, c.ID)
	_, err = db.Exec(sqlstr, c.Content, c.ParentCommentID, c.PostID, c.IPAddress, c.CreatedAt, c.UpdatedAt, c.DeletedAt, c.CreateUserID, c.UpdateUserID, c.DeleteUserID, c.ID)
	return err
}

// Save saves the Comment to the database.
func (c *Comment) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Comment.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Comment) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO test.comments (` +
		`id, content, parent_comment_id, post_id, ip_address, created_at, updated_at, deleted_at, create_user_id, update_user_id, delete_user_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, content, parent_comment_id, post_id, ip_address, created_at, updated_at, deleted_at, create_user_id, update_user_id, delete_user_id` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.content, EXCLUDED.parent_comment_id, EXCLUDED.post_id, EXCLUDED.ip_address, EXCLUDED.created_at, EXCLUDED.updated_at, EXCLUDED.deleted_at, EXCLUDED.create_user_id, EXCLUDED.update_user_id, EXCLUDED.delete_user_id` +
		`)`

	// run query
	XOLog(sqlstr, c.ID, c.Content, c.ParentCommentID, c.PostID, c.IPAddress, c.CreatedAt, c.UpdatedAt, c.DeletedAt, c.CreateUserID, c.UpdateUserID, c.DeleteUserID)
	_, err = db.Exec(sqlstr, c.ID, c.Content, c.ParentCommentID, c.PostID, c.IPAddress, c.CreatedAt, c.UpdatedAt, c.DeletedAt, c.CreateUserID, c.UpdateUserID, c.DeleteUserID)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Comment from the database.
func (c *Comment) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM test.comments WHERE id = $1`

	// run query
	XOLog(sqlstr, c.ID)
	_, err = db.Exec(sqlstr, c.ID)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// UserByCreateUserID returns the User associated with the Comment's CreateUserID (create_user_id).
//
// Generated from foreign key 'comments_create_user_id_fkey'.
func (c *Comment) UserByCreateUserID(db XODB) (*User, error) {
	return UserByID(db, c.CreateUserID)
}

// UserByDeleteUserID returns the User associated with the Comment's DeleteUserID (delete_user_id).
//
// Generated from foreign key 'comments_delete_user_id_fkey'.
func (c *Comment) UserByDeleteUserID(db XODB) (*User, error) {
	return UserByID(db, int(c.DeleteUserID.Int64))
}

// Comment returns the Comment associated with the Comment's ParentCommentID (parent_comment_id).
//
// Generated from foreign key 'comments_parent_comment_id_fkey'.
func (c *Comment) Comment(db XODB) (*Comment, error) {
	return CommentByID(db, int(c.ParentCommentID.Int64))
}

// Post returns the Post associated with the Comment's PostID (post_id).
//
// Generated from foreign key 'comments_post_id_fkey'.
func (c *Comment) Post(db XODB) (*Post, error) {
	return PostByID(db, c.PostID)
}

// UserByUpdateUserID returns the User associated with the Comment's UpdateUserID (update_user_id).
//
// Generated from foreign key 'comments_update_user_id_fkey'.
func (c *Comment) UserByUpdateUserID(db XODB) (*User, error) {
	return UserByID(db, c.UpdateUserID)
}

// CommentByID retrieves a row from 'test.comments' as a Comment.
//
// Generated from index 'comments_pkey'.
func CommentByID(db XODB, id int) (*Comment, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, content, parent_comment_id, post_id, ip_address, created_at, updated_at, deleted_at, create_user_id, update_user_id, delete_user_id ` +
		`FROM test.comments ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	c := Comment{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&c.ID, &c.Content, &c.ParentCommentID, &c.PostID, &c.IPAddress, &c.CreatedAt, &c.UpdatedAt, &c.DeletedAt, &c.CreateUserID, &c.UpdateUserID, &c.DeleteUserID)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
