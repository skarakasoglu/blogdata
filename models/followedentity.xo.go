// Package models contains the types for schema 'test'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// FollowedEntity represents a row from 'test.followed_entities'.
type FollowedEntity struct {
	ID                 int       `json:"id"`                   // id
	FollowableEntityID int       `json:"followable_entity_id"` // followable_entity_id
	FollowerUserID     int       `json:"follower_user_id"`     // follower_user_id
	EntityID           int       `json:"entity_id"`            // entity_id
	FollowedAt         time.Time `json:"followed_at"`          // followed_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FollowedEntity exists in the database.
func (fe *FollowedEntity) Exists() bool {
	return fe._exists
}

// Deleted provides information if the FollowedEntity has been deleted from the database.
func (fe *FollowedEntity) Deleted() bool {
	return fe._deleted
}

// Insert inserts the FollowedEntity to the database.
func (fe *FollowedEntity) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if fe._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO test.followed_entities (` +
		`followable_entity_id, follower_user_id, entity_id, followed_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, fe.FollowableEntityID, fe.FollowerUserID, fe.EntityID, fe.FollowedAt)
	err = db.QueryRow(sqlstr, fe.FollowableEntityID, fe.FollowerUserID, fe.EntityID, fe.FollowedAt).Scan(&fe.ID)
	if err != nil {
		return err
	}

	// set existence
	fe._exists = true

	return nil
}

// Update updates the FollowedEntity in the database.
func (fe *FollowedEntity) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fe._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if fe._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE test.followed_entities SET (` +
		`followable_entity_id, follower_user_id, entity_id, followed_at` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE id = $5`

	// run query
	XOLog(sqlstr, fe.FollowableEntityID, fe.FollowerUserID, fe.EntityID, fe.FollowedAt, fe.ID)
	_, err = db.Exec(sqlstr, fe.FollowableEntityID, fe.FollowerUserID, fe.EntityID, fe.FollowedAt, fe.ID)
	return err
}

// Save saves the FollowedEntity to the database.
func (fe *FollowedEntity) Save(db XODB) error {
	if fe.Exists() {
		return fe.Update(db)
	}

	return fe.Insert(db)
}

// Upsert performs an upsert for FollowedEntity.
//
// NOTE: PostgreSQL 9.5+ only
func (fe *FollowedEntity) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if fe._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO test.followed_entities (` +
		`id, followable_entity_id, follower_user_id, entity_id, followed_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, followable_entity_id, follower_user_id, entity_id, followed_at` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.followable_entity_id, EXCLUDED.follower_user_id, EXCLUDED.entity_id, EXCLUDED.followed_at` +
		`)`

	// run query
	XOLog(sqlstr, fe.ID, fe.FollowableEntityID, fe.FollowerUserID, fe.EntityID, fe.FollowedAt)
	_, err = db.Exec(sqlstr, fe.ID, fe.FollowableEntityID, fe.FollowerUserID, fe.EntityID, fe.FollowedAt)
	if err != nil {
		return err
	}

	// set existence
	fe._exists = true

	return nil
}

// Delete deletes the FollowedEntity from the database.
func (fe *FollowedEntity) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fe._exists {
		return nil
	}

	// if deleted, bail
	if fe._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM test.followed_entities WHERE id = $1`

	// run query
	XOLog(sqlstr, fe.ID)
	_, err = db.Exec(sqlstr, fe.ID)
	if err != nil {
		return err
	}

	// set deleted
	fe._deleted = true

	return nil
}

// FollowableEntity returns the FollowableEntity associated with the FollowedEntity's FollowableEntityID (followable_entity_id).
//
// Generated from foreign key 'followed_entities_followable_entity_id_fkey'.
func (fe *FollowedEntity) FollowableEntity(db XODB) (*FollowableEntity, error) {
	return FollowableEntityByID(db, fe.FollowableEntityID)
}

// User returns the User associated with the FollowedEntity's FollowerUserID (follower_user_id).
//
// Generated from foreign key 'followed_entities_follower_user_id_fkey'.
func (fe *FollowedEntity) User(db XODB) (*User, error) {
	return UserByID(db, fe.FollowerUserID)
}

// FollowedEntityByID retrieves a row from 'test.followed_entities' as a FollowedEntity.
//
// Generated from index 'followed_entities_pkey'.
func FollowedEntityByID(db XODB, id int) (*FollowedEntity, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, followable_entity_id, follower_user_id, entity_id, followed_at ` +
		`FROM test.followed_entities ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	fe := FollowedEntity{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&fe.ID, &fe.FollowableEntityID, &fe.FollowerUserID, &fe.EntityID, &fe.FollowedAt)
	if err != nil {
		return nil, err
	}

	return &fe, nil
}
