// Package models contains the types for schema 'test'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/lib/pq"
)

// Category represents a row from 'test.categories'.
type Category struct {
	ID           int            `json:"id"`             // id
	Name         string         `json:"name"`           // name
	Description  sql.NullString `json:"description"`    // description
	CreatedAt    time.Time      `json:"created_at"`     // created_at
	UpdatedAt    time.Time      `json:"updated_at"`     // updated_at
	DeletedAt    pq.NullTime    `json:"deleted_at"`     // deleted_at
	CreateUserID sql.NullInt64  `json:"create_user_id"` // create_user_id
	UpdateUserID sql.NullInt64  `json:"update_user_id"` // update_user_id
	DeleteUserID sql.NullInt64  `json:"delete_user_id"` // delete_user_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Category exists in the database.
func (c *Category) Exists() bool {
	return c._exists
}

// Deleted provides information if the Category has been deleted from the database.
func (c *Category) Deleted() bool {
	return c._deleted
}

// Insert inserts the Category to the database.
func (c *Category) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO test.categories (` +
		`name, description, created_at, updated_at, deleted_at, create_user_id, update_user_id, delete_user_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, c.Name, c.Description, c.CreatedAt, c.UpdatedAt, c.DeletedAt, c.CreateUserID, c.UpdateUserID, c.DeleteUserID)
	err = db.QueryRow(sqlstr, c.Name, c.Description, c.CreatedAt, c.UpdatedAt, c.DeletedAt, c.CreateUserID, c.UpdateUserID, c.DeleteUserID).Scan(&c.ID)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Category in the database.
func (c *Category) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE test.categories SET (` +
		`name, description, created_at, updated_at, deleted_at, create_user_id, update_user_id, delete_user_id` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) WHERE id = $9`

	// run query
	XOLog(sqlstr, c.Name, c.Description, c.CreatedAt, c.UpdatedAt, c.DeletedAt, c.CreateUserID, c.UpdateUserID, c.DeleteUserID, c.ID)
	_, err = db.Exec(sqlstr, c.Name, c.Description, c.CreatedAt, c.UpdatedAt, c.DeletedAt, c.CreateUserID, c.UpdateUserID, c.DeleteUserID, c.ID)
	return err
}

// Save saves the Category to the database.
func (c *Category) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Category.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Category) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO test.categories (` +
		`id, name, description, created_at, updated_at, deleted_at, create_user_id, update_user_id, delete_user_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, name, description, created_at, updated_at, deleted_at, create_user_id, update_user_id, delete_user_id` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.name, EXCLUDED.description, EXCLUDED.created_at, EXCLUDED.updated_at, EXCLUDED.deleted_at, EXCLUDED.create_user_id, EXCLUDED.update_user_id, EXCLUDED.delete_user_id` +
		`)`

	// run query
	XOLog(sqlstr, c.ID, c.Name, c.Description, c.CreatedAt, c.UpdatedAt, c.DeletedAt, c.CreateUserID, c.UpdateUserID, c.DeleteUserID)
	_, err = db.Exec(sqlstr, c.ID, c.Name, c.Description, c.CreatedAt, c.UpdatedAt, c.DeletedAt, c.CreateUserID, c.UpdateUserID, c.DeleteUserID)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Category from the database.
func (c *Category) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM test.categories WHERE id = $1`

	// run query
	XOLog(sqlstr, c.ID)
	_, err = db.Exec(sqlstr, c.ID)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// UserByCreateUserID returns the User associated with the Category's CreateUserID (create_user_id).
//
// Generated from foreign key 'categories_create_user_id_fkey'.
func (c *Category) UserByCreateUserID(db XODB) (*User, error) {
	return UserByID(db, int(c.CreateUserID.Int64))
}

// UserByDeleteUserID returns the User associated with the Category's DeleteUserID (delete_user_id).
//
// Generated from foreign key 'categories_delete_user_id_fkey'.
func (c *Category) UserByDeleteUserID(db XODB) (*User, error) {
	return UserByID(db, int(c.DeleteUserID.Int64))
}

// UserByUpdateUserID returns the User associated with the Category's UpdateUserID (update_user_id).
//
// Generated from foreign key 'categories_update_user_id_fkey'.
func (c *Category) UserByUpdateUserID(db XODB) (*User, error) {
	return UserByID(db, int(c.UpdateUserID.Int64))
}

// CategoryByID retrieves a row from 'test.categories' as a Category.
//
// Generated from index 'categories_pkey'.
func CategoryByID(db XODB, id int) (*Category, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, description, created_at, updated_at, deleted_at, create_user_id, update_user_id, delete_user_id ` +
		`FROM test.categories ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	c := Category{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&c.ID, &c.Name, &c.Description, &c.CreatedAt, &c.UpdatedAt, &c.DeletedAt, &c.CreateUserID, &c.UpdateUserID, &c.DeleteUserID)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
