// Package models contains the types for schema 'test'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/lib/pq"
)

// Post represents a row from 'test.posts'.
type Post struct {
	ID           int            `json:"id"`             // id
	Title        string         `json:"title"`          // title
	ImagePath    string         `json:"image_path"`     // image_path
	Content      string         `json:"content"`        // content
	Tags         sql.NullString `json:"tags"`           // tags
	CategoryID   int            `json:"category_id"`    // category_id
	IPAddress    string         `json:"ip_address"`     // ip_address
	CreatedAt    time.Time      `json:"created_at"`     // created_at
	UpdatedAt    time.Time      `json:"updated_at"`     // updated_at
	DeletedAt    pq.NullTime    `json:"deleted_at"`     // deleted_at
	CreateUserID int            `json:"create_user_id"` // create_user_id
	UpdateUserID int            `json:"update_user_id"` // update_user_id
	DeleteUserID sql.NullInt64  `json:"delete_user_id"` // delete_user_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Post exists in the database.
func (p *Post) Exists() bool {
	return p._exists
}

// Deleted provides information if the Post has been deleted from the database.
func (p *Post) Deleted() bool {
	return p._deleted
}

// Insert inserts the Post to the database.
func (p *Post) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO test.posts (` +
		`title, image_path, content, tags, category_id, ip_address, created_at, updated_at, deleted_at, create_user_id, update_user_id, delete_user_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, p.Title, p.ImagePath, p.Content, p.Tags, p.CategoryID, p.IPAddress, p.CreatedAt, p.UpdatedAt, p.DeletedAt, p.CreateUserID, p.UpdateUserID, p.DeleteUserID)
	err = db.QueryRow(sqlstr, p.Title, p.ImagePath, p.Content, p.Tags, p.CategoryID, p.IPAddress, p.CreatedAt, p.UpdatedAt, p.DeletedAt, p.CreateUserID, p.UpdateUserID, p.DeleteUserID).Scan(&p.ID)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Update updates the Post in the database.
func (p *Post) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE test.posts SET (` +
		`title, image_path, content, tags, category_id, ip_address, created_at, updated_at, deleted_at, create_user_id, update_user_id, delete_user_id` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12` +
		`) WHERE id = $13`

	// run query
	XOLog(sqlstr, p.Title, p.ImagePath, p.Content, p.Tags, p.CategoryID, p.IPAddress, p.CreatedAt, p.UpdatedAt, p.DeletedAt, p.CreateUserID, p.UpdateUserID, p.DeleteUserID, p.ID)
	_, err = db.Exec(sqlstr, p.Title, p.ImagePath, p.Content, p.Tags, p.CategoryID, p.IPAddress, p.CreatedAt, p.UpdatedAt, p.DeletedAt, p.CreateUserID, p.UpdateUserID, p.DeleteUserID, p.ID)
	return err
}

// Save saves the Post to the database.
func (p *Post) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Upsert performs an upsert for Post.
//
// NOTE: PostgreSQL 9.5+ only
func (p *Post) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO test.posts (` +
		`id, title, image_path, content, tags, category_id, ip_address, created_at, updated_at, deleted_at, create_user_id, update_user_id, delete_user_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, title, image_path, content, tags, category_id, ip_address, created_at, updated_at, deleted_at, create_user_id, update_user_id, delete_user_id` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.title, EXCLUDED.image_path, EXCLUDED.content, EXCLUDED.tags, EXCLUDED.category_id, EXCLUDED.ip_address, EXCLUDED.created_at, EXCLUDED.updated_at, EXCLUDED.deleted_at, EXCLUDED.create_user_id, EXCLUDED.update_user_id, EXCLUDED.delete_user_id` +
		`)`

	// run query
	XOLog(sqlstr, p.ID, p.Title, p.ImagePath, p.Content, p.Tags, p.CategoryID, p.IPAddress, p.CreatedAt, p.UpdatedAt, p.DeletedAt, p.CreateUserID, p.UpdateUserID, p.DeleteUserID)
	_, err = db.Exec(sqlstr, p.ID, p.Title, p.ImagePath, p.Content, p.Tags, p.CategoryID, p.IPAddress, p.CreatedAt, p.UpdatedAt, p.DeletedAt, p.CreateUserID, p.UpdateUserID, p.DeleteUserID)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Delete deletes the Post from the database.
func (p *Post) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM test.posts WHERE id = $1`

	// run query
	XOLog(sqlstr, p.ID)
	_, err = db.Exec(sqlstr, p.ID)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// Category returns the Category associated with the Post's CategoryID (category_id).
//
// Generated from foreign key 'posts_category_id_fkey'.
func (p *Post) Category(db XODB) (*Category, error) {
	return CategoryByID(db, p.CategoryID)
}

// UserByCreateUserID returns the User associated with the Post's CreateUserID (create_user_id).
//
// Generated from foreign key 'posts_create_user_id_fkey'.
func (p *Post) UserByCreateUserID(db XODB) (*User, error) {
	return UserByID(db, p.CreateUserID)
}

// UserByDeleteUserID returns the User associated with the Post's DeleteUserID (delete_user_id).
//
// Generated from foreign key 'posts_delete_user_id_fkey'.
func (p *Post) UserByDeleteUserID(db XODB) (*User, error) {
	return UserByID(db, int(p.DeleteUserID.Int64))
}

// UserByUpdateUserID returns the User associated with the Post's UpdateUserID (update_user_id).
//
// Generated from foreign key 'posts_update_user_id_fkey'.
func (p *Post) UserByUpdateUserID(db XODB) (*User, error) {
	return UserByID(db, p.UpdateUserID)
}

// PostByID retrieves a row from 'test.posts' as a Post.
//
// Generated from index 'posts_pkey'.
func PostByID(db XODB, id int) (*Post, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, title, image_path, content, tags, category_id, ip_address, created_at, updated_at, deleted_at, create_user_id, update_user_id, delete_user_id ` +
		`FROM test.posts ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	p := Post{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&p.ID, &p.Title, &p.ImagePath, &p.Content, &p.Tags, &p.CategoryID, &p.IPAddress, &p.CreatedAt, &p.UpdatedAt, &p.DeletedAt, &p.CreateUserID, &p.UpdateUserID, &p.DeleteUserID)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
