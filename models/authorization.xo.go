// Package models contains the types for schema 'test'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/lib/pq"
)

// Authorization represents a row from 'test.authorizations'.
type Authorization struct {
	ID           int            `json:"id"`             // id
	Key          string         `json:"key"`            // key
	Description  sql.NullString `json:"description"`    // description
	RoleID       int            `json:"role_id"`        // role_id
	Create       bool           `json:"create"`         // create
	Read         bool           `json:"read"`           // read
	Update       bool           `json:"update"`         // update
	Delete       bool           `json:"delete"`         // delete
	CreatedAt    time.Time      `json:"created_at"`     // created_at
	UpdatedAt    time.Time      `json:"updated_at"`     // updated_at
	DeletedAt    pq.NullTime    `json:"deleted_at"`     // deleted_at
	CreateUserID sql.NullInt64  `json:"create_user_id"` // create_user_id
	UpdateUserID sql.NullInt64  `json:"update_user_id"` // update_user_id
	DeleteUserID sql.NullInt64  `json:"delete_user_id"` // delete_user_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Authorization exists in the database.
func (a *Authorization) Exists() bool {
	return a._exists
}

// Deleted provides information if the Authorization has been deleted from the database.
func (a *Authorization) Deleted() bool {
	return a._deleted
}

// Insert inserts the Authorization to the database.
func (a *Authorization) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO test.authorizations (` +
		`key, description, role_id, create, read, update, delete, created_at, updated_at, deleted_at, create_user_id, update_user_id, delete_user_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, a.Key, a.Description, a.RoleID, a.Create, a.Read, a.Update, a.Delete, a.CreatedAt, a.UpdatedAt, a.DeletedAt, a.CreateUserID, a.UpdateUserID, a.DeleteUserID)
	err = db.QueryRow(sqlstr, a.Key, a.Description, a.RoleID, a.Create, a.Read, a.Update, a.Delete, a.CreatedAt, a.UpdatedAt, a.DeletedAt, a.CreateUserID, a.UpdateUserID, a.DeleteUserID).Scan(&a.ID)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Update updates the Authorization in the database.
func (a *Authorization) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE test.authorizations SET (` +
		`key, description, role_id, create, read, update, delete, created_at, updated_at, deleted_at, create_user_id, update_user_id, delete_user_id` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`) WHERE id = $14`

	// run query
	XOLog(sqlstr, a.Key, a.Description, a.RoleID, a.Create, a.Read, a.Update, a.Delete, a.CreatedAt, a.UpdatedAt, a.DeletedAt, a.CreateUserID, a.UpdateUserID, a.DeleteUserID, a.ID)
	_, err = db.Exec(sqlstr, a.Key, a.Description, a.RoleID, a.Create, a.Read, a.Update, a.Delete, a.CreatedAt, a.UpdatedAt, a.DeletedAt, a.CreateUserID, a.UpdateUserID, a.DeleteUserID, a.ID)
	return err
}

// Save saves the Authorization to the database.
func (a *Authorization) Save(db XODB) error {
	if a.Exists() {
		return a.Update(db)
	}

	return a.Insert(db)
}

// Upsert performs an upsert for Authorization.
//
// NOTE: PostgreSQL 9.5+ only
func (a *Authorization) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO test.authorizations (` +
		`id, key, description, role_id, create, read, update, delete, created_at, updated_at, deleted_at, create_user_id, update_user_id, delete_user_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, key, description, role_id, create, read, update, delete, created_at, updated_at, deleted_at, create_user_id, update_user_id, delete_user_id` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.key, EXCLUDED.description, EXCLUDED.role_id, EXCLUDED.create, EXCLUDED.read, EXCLUDED.update, EXCLUDED.delete, EXCLUDED.created_at, EXCLUDED.updated_at, EXCLUDED.deleted_at, EXCLUDED.create_user_id, EXCLUDED.update_user_id, EXCLUDED.delete_user_id` +
		`)`

	// run query
	XOLog(sqlstr, a.ID, a.Key, a.Description, a.RoleID, a.Create, a.Read, a.Update, a.Delete, a.CreatedAt, a.UpdatedAt, a.DeletedAt, a.CreateUserID, a.UpdateUserID, a.DeleteUserID)
	_, err = db.Exec(sqlstr, a.ID, a.Key, a.Description, a.RoleID, a.Create, a.Read, a.Update, a.Delete, a.CreatedAt, a.UpdatedAt, a.DeletedAt, a.CreateUserID, a.UpdateUserID, a.DeleteUserID)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Delete deletes the Authorization from the database.
func (a *Authorization) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return nil
	}

	// if deleted, bail
	if a._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM test.authorizations WHERE id = $1`

	// run query
	XOLog(sqlstr, a.ID)
	_, err = db.Exec(sqlstr, a.ID)
	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// UserByCreateUserID returns the User associated with the Authorization's CreateUserID (create_user_id).
//
// Generated from foreign key 'authorizations_create_user_id_fkey'.
func (a *Authorization) UserByCreateUserID(db XODB) (*User, error) {
	return UserByID(db, int(a.CreateUserID.Int64))
}

// UserByDeleteUserID returns the User associated with the Authorization's DeleteUserID (delete_user_id).
//
// Generated from foreign key 'authorizations_delete_user_id_fkey'.
func (a *Authorization) UserByDeleteUserID(db XODB) (*User, error) {
	return UserByID(db, int(a.DeleteUserID.Int64))
}

// Role returns the Role associated with the Authorization's RoleID (role_id).
//
// Generated from foreign key 'authorizations_role_id_fkey'.
func (a *Authorization) Role(db XODB) (*Role, error) {
	return RoleByID(db, a.RoleID)
}

// UserByUpdateUserID returns the User associated with the Authorization's UpdateUserID (update_user_id).
//
// Generated from foreign key 'authorizations_update_user_id_fkey'.
func (a *Authorization) UserByUpdateUserID(db XODB) (*User, error) {
	return UserByID(db, int(a.UpdateUserID.Int64))
}

// AuthorizationByKey retrieves a row from 'test.authorizations' as a Authorization.
//
// Generated from index 'authorizations_key_key'.
func AuthorizationByKey(db XODB, key string) (*Authorization, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, key, description, role_id, create, read, update, delete, created_at, updated_at, deleted_at, create_user_id, update_user_id, delete_user_id ` +
		`FROM test.authorizations ` +
		`WHERE key = $1`

	// run query
	XOLog(sqlstr, key)
	a := Authorization{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, key).Scan(&a.ID, &a.Key, &a.Description, &a.RoleID, &a.Create, &a.Read, &a.Update, &a.Delete, &a.CreatedAt, &a.UpdatedAt, &a.DeletedAt, &a.CreateUserID, &a.UpdateUserID, &a.DeleteUserID)
	if err != nil {
		return nil, err
	}

	return &a, nil
}

// AuthorizationByID retrieves a row from 'test.authorizations' as a Authorization.
//
// Generated from index 'authorizations_pkey'.
func AuthorizationByID(db XODB, id int) (*Authorization, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, key, description, role_id, create, read, update, delete, created_at, updated_at, deleted_at, create_user_id, update_user_id, delete_user_id ` +
		`FROM test.authorizations ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	a := Authorization{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&a.ID, &a.Key, &a.Description, &a.RoleID, &a.Create, &a.Read, &a.Update, &a.Delete, &a.CreatedAt, &a.UpdatedAt, &a.DeletedAt, &a.CreateUserID, &a.UpdateUserID, &a.DeleteUserID)
	if err != nil {
		return nil, err
	}

	return &a, nil
}
