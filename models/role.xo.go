// Package models contains the types for schema 'test'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/lib/pq"
)

// Role represents a row from 'test.roles'.
type Role struct {
	ID           int            `json:"id"`             // id
	Key          sql.NullString `json:"key"`            // key
	LongName     string         `json:"long_name"`      // long_name
	Description  sql.NullString `json:"description"`    // description
	CreatedAt    time.Time      `json:"created_at"`     // created_at
	UpdatedAt    time.Time      `json:"updated_at"`     // updated_at
	DeletedAt    pq.NullTime    `json:"deleted_at"`     // deleted_at
	CreateUserID sql.NullInt64  `json:"create_user_id"` // create_user_id
	UpdateUserID sql.NullInt64  `json:"update_user_id"` // update_user_id
	DeleteUserID sql.NullInt64  `json:"delete_user_id"` // delete_user_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Role exists in the database.
func (r *Role) Exists() bool {
	return r._exists
}

// Deleted provides information if the Role has been deleted from the database.
func (r *Role) Deleted() bool {
	return r._deleted
}

// Insert inserts the Role to the database.
func (r *Role) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if r._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO test.roles (` +
		`key, long_name, description, created_at, updated_at, deleted_at, create_user_id, update_user_id, delete_user_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, r.Key, r.LongName, r.Description, r.CreatedAt, r.UpdatedAt, r.DeletedAt, r.CreateUserID, r.UpdateUserID, r.DeleteUserID)
	err = db.QueryRow(sqlstr, r.Key, r.LongName, r.Description, r.CreatedAt, r.UpdatedAt, r.DeletedAt, r.CreateUserID, r.UpdateUserID, r.DeleteUserID).Scan(&r.ID)
	if err != nil {
		return err
	}

	// set existence
	r._exists = true

	return nil
}

// Update updates the Role in the database.
func (r *Role) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !r._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if r._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE test.roles SET (` +
		`key, long_name, description, created_at, updated_at, deleted_at, create_user_id, update_user_id, delete_user_id` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) WHERE id = $10`

	// run query
	XOLog(sqlstr, r.Key, r.LongName, r.Description, r.CreatedAt, r.UpdatedAt, r.DeletedAt, r.CreateUserID, r.UpdateUserID, r.DeleteUserID, r.ID)
	_, err = db.Exec(sqlstr, r.Key, r.LongName, r.Description, r.CreatedAt, r.UpdatedAt, r.DeletedAt, r.CreateUserID, r.UpdateUserID, r.DeleteUserID, r.ID)
	return err
}

// Save saves the Role to the database.
func (r *Role) Save(db XODB) error {
	if r.Exists() {
		return r.Update(db)
	}

	return r.Insert(db)
}

// Upsert performs an upsert for Role.
//
// NOTE: PostgreSQL 9.5+ only
func (r *Role) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if r._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO test.roles (` +
		`id, key, long_name, description, created_at, updated_at, deleted_at, create_user_id, update_user_id, delete_user_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, key, long_name, description, created_at, updated_at, deleted_at, create_user_id, update_user_id, delete_user_id` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.key, EXCLUDED.long_name, EXCLUDED.description, EXCLUDED.created_at, EXCLUDED.updated_at, EXCLUDED.deleted_at, EXCLUDED.create_user_id, EXCLUDED.update_user_id, EXCLUDED.delete_user_id` +
		`)`

	// run query
	XOLog(sqlstr, r.ID, r.Key, r.LongName, r.Description, r.CreatedAt, r.UpdatedAt, r.DeletedAt, r.CreateUserID, r.UpdateUserID, r.DeleteUserID)
	_, err = db.Exec(sqlstr, r.ID, r.Key, r.LongName, r.Description, r.CreatedAt, r.UpdatedAt, r.DeletedAt, r.CreateUserID, r.UpdateUserID, r.DeleteUserID)
	if err != nil {
		return err
	}

	// set existence
	r._exists = true

	return nil
}

// Delete deletes the Role from the database.
func (r *Role) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !r._exists {
		return nil
	}

	// if deleted, bail
	if r._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM test.roles WHERE id = $1`

	// run query
	XOLog(sqlstr, r.ID)
	_, err = db.Exec(sqlstr, r.ID)
	if err != nil {
		return err
	}

	// set deleted
	r._deleted = true

	return nil
}

// UserByCreateUserID returns the User associated with the Role's CreateUserID (create_user_id).
//
// Generated from foreign key 'roles_create_user_id_fkey'.
func (r *Role) UserByCreateUserID(db XODB) (*User, error) {
	return UserByID(db, int(r.CreateUserID.Int64))
}

// UserByDeleteUserID returns the User associated with the Role's DeleteUserID (delete_user_id).
//
// Generated from foreign key 'roles_delete_user_id_fkey'.
func (r *Role) UserByDeleteUserID(db XODB) (*User, error) {
	return UserByID(db, int(r.DeleteUserID.Int64))
}

// UserByUpdateUserID returns the User associated with the Role's UpdateUserID (update_user_id).
//
// Generated from foreign key 'roles_update_user_id_fkey'.
func (r *Role) UserByUpdateUserID(db XODB) (*User, error) {
	return UserByID(db, int(r.UpdateUserID.Int64))
}

// RoleByLongName retrieves a row from 'test.roles' as a Role.
//
// Generated from index 'roles_long_name_key'.
func RoleByLongName(db XODB, longName string) (*Role, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, key, long_name, description, created_at, updated_at, deleted_at, create_user_id, update_user_id, delete_user_id ` +
		`FROM test.roles ` +
		`WHERE long_name = $1`

	// run query
	XOLog(sqlstr, longName)
	r := Role{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, longName).Scan(&r.ID, &r.Key, &r.LongName, &r.Description, &r.CreatedAt, &r.UpdatedAt, &r.DeletedAt, &r.CreateUserID, &r.UpdateUserID, &r.DeleteUserID)
	if err != nil {
		return nil, err
	}

	return &r, nil
}

// RoleByID retrieves a row from 'test.roles' as a Role.
//
// Generated from index 'roles_pkey'.
func RoleByID(db XODB, id int) (*Role, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, key, long_name, description, created_at, updated_at, deleted_at, create_user_id, update_user_id, delete_user_id ` +
		`FROM test.roles ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	r := Role{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&r.ID, &r.Key, &r.LongName, &r.Description, &r.CreatedAt, &r.UpdatedAt, &r.DeletedAt, &r.CreateUserID, &r.UpdateUserID, &r.DeleteUserID)
	if err != nil {
		return nil, err
	}

	return &r, nil
}
