// Package models contains the types for schema 'test'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// FollowableEntity represents a row from 'test.followable_entities'.
type FollowableEntity struct {
	ID          int            `json:"id"`           // id
	TableName   string         `json:"table_name"`   // table_name
	DisplayName string         `json:"display_name"` // display_name
	Description sql.NullString `json:"description"`  // description

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FollowableEntity exists in the database.
func (fe *FollowableEntity) Exists() bool {
	return fe._exists
}

// Deleted provides information if the FollowableEntity has been deleted from the database.
func (fe *FollowableEntity) Deleted() bool {
	return fe._deleted
}

// Insert inserts the FollowableEntity to the database.
func (fe *FollowableEntity) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if fe._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO test.followable_entities (` +
		`table_name, display_name, description` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, fe.TableName, fe.DisplayName, fe.Description)
	err = db.QueryRow(sqlstr, fe.TableName, fe.DisplayName, fe.Description).Scan(&fe.ID)
	if err != nil {
		return err
	}

	// set existence
	fe._exists = true

	return nil
}

// Update updates the FollowableEntity in the database.
func (fe *FollowableEntity) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fe._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if fe._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE test.followable_entities SET (` +
		`table_name, display_name, description` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE id = $4`

	// run query
	XOLog(sqlstr, fe.TableName, fe.DisplayName, fe.Description, fe.ID)
	_, err = db.Exec(sqlstr, fe.TableName, fe.DisplayName, fe.Description, fe.ID)
	return err
}

// Save saves the FollowableEntity to the database.
func (fe *FollowableEntity) Save(db XODB) error {
	if fe.Exists() {
		return fe.Update(db)
	}

	return fe.Insert(db)
}

// Upsert performs an upsert for FollowableEntity.
//
// NOTE: PostgreSQL 9.5+ only
func (fe *FollowableEntity) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if fe._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO test.followable_entities (` +
		`id, table_name, display_name, description` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, table_name, display_name, description` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.table_name, EXCLUDED.display_name, EXCLUDED.description` +
		`)`

	// run query
	XOLog(sqlstr, fe.ID, fe.TableName, fe.DisplayName, fe.Description)
	_, err = db.Exec(sqlstr, fe.ID, fe.TableName, fe.DisplayName, fe.Description)
	if err != nil {
		return err
	}

	// set existence
	fe._exists = true

	return nil
}

// Delete deletes the FollowableEntity from the database.
func (fe *FollowableEntity) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fe._exists {
		return nil
	}

	// if deleted, bail
	if fe._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM test.followable_entities WHERE id = $1`

	// run query
	XOLog(sqlstr, fe.ID)
	_, err = db.Exec(sqlstr, fe.ID)
	if err != nil {
		return err
	}

	// set deleted
	fe._deleted = true

	return nil
}

// FollowableEntityByID retrieves a row from 'test.followable_entities' as a FollowableEntity.
//
// Generated from index 'followable_entities_pkey'.
func FollowableEntityByID(db XODB, id int) (*FollowableEntity, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, table_name, display_name, description ` +
		`FROM test.followable_entities ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	fe := FollowableEntity{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&fe.ID, &fe.TableName, &fe.DisplayName, &fe.Description)
	if err != nil {
		return nil, err
	}

	return &fe, nil
}

// FollowableEntityByTableName retrieves a row from 'test.followable_entities' as a FollowableEntity.
//
// Generated from index 'followable_entities_table_name_key'.
func FollowableEntityByTableName(db XODB, tableName string) (*FollowableEntity, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, table_name, display_name, description ` +
		`FROM test.followable_entities ` +
		`WHERE table_name = $1`

	// run query
	XOLog(sqlstr, tableName)
	fe := FollowableEntity{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, tableName).Scan(&fe.ID, &fe.TableName, &fe.DisplayName, &fe.Description)
	if err != nil {
		return nil, err
	}

	return &fe, nil
}
