// Package models contains the types for schema 'test'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"

	"github.com/lib/pq"
)

// PostReaction represents a row from 'test.post_reactions'.
type PostReaction struct {
	ID             int         `json:"id"`               // id
	PostID         int         `json:"post_id"`          // post_id
	ReactionID     int         `json:"reaction_id"`      // reaction_id
	ReactantUserID int         `json:"reactant_user_id"` // reactant_user_id
	ReactedAt      time.Time   `json:"reacted_at"`       // reacted_at
	DeletedAt      pq.NullTime `json:"deleted_at"`       // deleted_at
	IPAddress      string      `json:"ip_address"`       // ip_address

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PostReaction exists in the database.
func (pr *PostReaction) Exists() bool {
	return pr._exists
}

// Deleted provides information if the PostReaction has been deleted from the database.
func (pr *PostReaction) Deleted() bool {
	return pr._deleted
}

// Insert inserts the PostReaction to the database.
func (pr *PostReaction) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO test.post_reactions (` +
		`post_id, reaction_id, reactant_user_id, reacted_at, deleted_at, ip_address` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, pr.PostID, pr.ReactionID, pr.ReactantUserID, pr.ReactedAt, pr.DeletedAt, pr.IPAddress)
	err = db.QueryRow(sqlstr, pr.PostID, pr.ReactionID, pr.ReactantUserID, pr.ReactedAt, pr.DeletedAt, pr.IPAddress).Scan(&pr.ID)
	if err != nil {
		return err
	}

	// set existence
	pr._exists = true

	return nil
}

// Update updates the PostReaction in the database.
func (pr *PostReaction) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pr._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE test.post_reactions SET (` +
		`post_id, reaction_id, reactant_user_id, reacted_at, deleted_at, ip_address` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6` +
		`) WHERE id = $7`

	// run query
	XOLog(sqlstr, pr.PostID, pr.ReactionID, pr.ReactantUserID, pr.ReactedAt, pr.DeletedAt, pr.IPAddress, pr.ID)
	_, err = db.Exec(sqlstr, pr.PostID, pr.ReactionID, pr.ReactantUserID, pr.ReactedAt, pr.DeletedAt, pr.IPAddress, pr.ID)
	return err
}

// Save saves the PostReaction to the database.
func (pr *PostReaction) Save(db XODB) error {
	if pr.Exists() {
		return pr.Update(db)
	}

	return pr.Insert(db)
}

// Upsert performs an upsert for PostReaction.
//
// NOTE: PostgreSQL 9.5+ only
func (pr *PostReaction) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if pr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO test.post_reactions (` +
		`id, post_id, reaction_id, reactant_user_id, reacted_at, deleted_at, ip_address` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, post_id, reaction_id, reactant_user_id, reacted_at, deleted_at, ip_address` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.post_id, EXCLUDED.reaction_id, EXCLUDED.reactant_user_id, EXCLUDED.reacted_at, EXCLUDED.deleted_at, EXCLUDED.ip_address` +
		`)`

	// run query
	XOLog(sqlstr, pr.ID, pr.PostID, pr.ReactionID, pr.ReactantUserID, pr.ReactedAt, pr.DeletedAt, pr.IPAddress)
	_, err = db.Exec(sqlstr, pr.ID, pr.PostID, pr.ReactionID, pr.ReactantUserID, pr.ReactedAt, pr.DeletedAt, pr.IPAddress)
	if err != nil {
		return err
	}

	// set existence
	pr._exists = true

	return nil
}

// Delete deletes the PostReaction from the database.
func (pr *PostReaction) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pr._exists {
		return nil
	}

	// if deleted, bail
	if pr._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM test.post_reactions WHERE id = $1`

	// run query
	XOLog(sqlstr, pr.ID)
	_, err = db.Exec(sqlstr, pr.ID)
	if err != nil {
		return err
	}

	// set deleted
	pr._deleted = true

	return nil
}

// Post returns the Post associated with the PostReaction's PostID (post_id).
//
// Generated from foreign key 'post_reactions_post_id_fkey'.
func (pr *PostReaction) Post(db XODB) (*Post, error) {
	return PostByID(db, pr.PostID)
}

// User returns the User associated with the PostReaction's ReactantUserID (reactant_user_id).
//
// Generated from foreign key 'post_reactions_reactant_user_id_fkey'.
func (pr *PostReaction) User(db XODB) (*User, error) {
	return UserByID(db, pr.ReactantUserID)
}

// Reaction returns the Reaction associated with the PostReaction's ReactionID (reaction_id).
//
// Generated from foreign key 'post_reactions_reaction_id_fkey'.
func (pr *PostReaction) Reaction(db XODB) (*Reaction, error) {
	return ReactionByID(db, pr.ReactionID)
}

// PostReactionByID retrieves a row from 'test.post_reactions' as a PostReaction.
//
// Generated from index 'post_reactions_pkey'.
func PostReactionByID(db XODB, id int) (*PostReaction, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, post_id, reaction_id, reactant_user_id, reacted_at, deleted_at, ip_address ` +
		`FROM test.post_reactions ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	pr := PostReaction{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pr.ID, &pr.PostID, &pr.ReactionID, &pr.ReactantUserID, &pr.ReactedAt, &pr.DeletedAt, &pr.IPAddress)
	if err != nil {
		return nil, err
	}

	return &pr, nil
}
