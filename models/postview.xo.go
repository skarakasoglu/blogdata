// Package models contains the types for schema 'test'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// PostView represents a row from 'test.post_views'.
type PostView struct {
	ID           int       `json:"id"`             // id
	PostID       int       `json:"post_id"`        // post_id
	ViewerUserID int       `json:"viewer_user_id"` // viewer_user_id
	IPAddress    string    `json:"ip_address"`     // ip_address
	ViewedAt     time.Time `json:"viewed_at"`      // viewed_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PostView exists in the database.
func (pv *PostView) Exists() bool {
	return pv._exists
}

// Deleted provides information if the PostView has been deleted from the database.
func (pv *PostView) Deleted() bool {
	return pv._deleted
}

// Insert inserts the PostView to the database.
func (pv *PostView) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pv._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO test.post_views (` +
		`post_id, viewer_user_id, ip_address, viewed_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, pv.PostID, pv.ViewerUserID, pv.IPAddress, pv.ViewedAt)
	err = db.QueryRow(sqlstr, pv.PostID, pv.ViewerUserID, pv.IPAddress, pv.ViewedAt).Scan(&pv.ID)
	if err != nil {
		return err
	}

	// set existence
	pv._exists = true

	return nil
}

// Update updates the PostView in the database.
func (pv *PostView) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pv._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pv._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE test.post_views SET (` +
		`post_id, viewer_user_id, ip_address, viewed_at` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE id = $5`

	// run query
	XOLog(sqlstr, pv.PostID, pv.ViewerUserID, pv.IPAddress, pv.ViewedAt, pv.ID)
	_, err = db.Exec(sqlstr, pv.PostID, pv.ViewerUserID, pv.IPAddress, pv.ViewedAt, pv.ID)
	return err
}

// Save saves the PostView to the database.
func (pv *PostView) Save(db XODB) error {
	if pv.Exists() {
		return pv.Update(db)
	}

	return pv.Insert(db)
}

// Upsert performs an upsert for PostView.
//
// NOTE: PostgreSQL 9.5+ only
func (pv *PostView) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if pv._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO test.post_views (` +
		`id, post_id, viewer_user_id, ip_address, viewed_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, post_id, viewer_user_id, ip_address, viewed_at` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.post_id, EXCLUDED.viewer_user_id, EXCLUDED.ip_address, EXCLUDED.viewed_at` +
		`)`

	// run query
	XOLog(sqlstr, pv.ID, pv.PostID, pv.ViewerUserID, pv.IPAddress, pv.ViewedAt)
	_, err = db.Exec(sqlstr, pv.ID, pv.PostID, pv.ViewerUserID, pv.IPAddress, pv.ViewedAt)
	if err != nil {
		return err
	}

	// set existence
	pv._exists = true

	return nil
}

// Delete deletes the PostView from the database.
func (pv *PostView) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pv._exists {
		return nil
	}

	// if deleted, bail
	if pv._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM test.post_views WHERE id = $1`

	// run query
	XOLog(sqlstr, pv.ID)
	_, err = db.Exec(sqlstr, pv.ID)
	if err != nil {
		return err
	}

	// set deleted
	pv._deleted = true

	return nil
}

// Post returns the Post associated with the PostView's PostID (post_id).
//
// Generated from foreign key 'post_views_post_id_fkey'.
func (pv *PostView) Post(db XODB) (*Post, error) {
	return PostByID(db, pv.PostID)
}

// User returns the User associated with the PostView's ViewerUserID (viewer_user_id).
//
// Generated from foreign key 'post_views_viewer_user_id_fkey'.
func (pv *PostView) User(db XODB) (*User, error) {
	return UserByID(db, pv.ViewerUserID)
}

// PostViewByID retrieves a row from 'test.post_views' as a PostView.
//
// Generated from index 'post_views_pkey'.
func PostViewByID(db XODB, id int) (*PostView, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, post_id, viewer_user_id, ip_address, viewed_at ` +
		`FROM test.post_views ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	pv := PostView{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pv.ID, &pv.PostID, &pv.ViewerUserID, &pv.IPAddress, &pv.ViewedAt)
	if err != nil {
		return nil, err
	}

	return &pv, nil
}
